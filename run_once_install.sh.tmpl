#!/bin/bash
# Generated by chezmoi on {{ now | date "2006-01-02 15:04:05" }}
# Complete ChezMoi + ASDF + Tooling Setup for WSL2 (templated)

set -euo pipefail # Stricter error handling

# Configuration
readonly ASDF_VERSION="v0.18.0"
readonly ASDF_DIR="{{ .chezmoi.homeDir }}/.asdf"
readonly HOME_DIR="{{ .chezmoi.homeDir }}"
readonly CARGO_TOOLS=(cargo-edit cargo-watch cargo-audit cargo-nextest)

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

# Logging functions
log_info() {
  echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
  echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
  echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Function to download and verify files
download_with_retry() {
  local url="$1"
  local output="$2"
  local retries=3
  local count=0

  while [ $count -lt $retries ]; do
    if curl -fsSL --connect-timeout 10 --max-time 300 "$url" -o "$output"; then
      # Verify the file is not empty and is the expected type
      if [ -s "$output" ]; then
        return 0
      fi
    fi
    count=$((count + 1))
    log_warn "Download attempt $count failed, retrying..."
    sleep 2
  done

  log_error "Failed to download $url after $retries attempts"
  return 1
}

# Function to add line to file if not present
add_to_file_if_missing() {
  local file="$1"
  local line="$2"
  local search_pattern="$3"

  if [ -f "$file" ]; then
    if ! grep -q "$search_pattern" "$file"; then
      echo "$line" >>"$file"
      log_info "Added configuration to $file"
    else
      log_info "Configuration already exists in $file"
    fi
  fi
}

# 1. Install Neovim (latest stable AppImage)
install_neovim() {
  if ! command_exists nvim; then
    log_info "Installing Neovim..."
    local nvim_path="/tmp/nvim.appimage"

    if download_with_retry "https://github.com/neovim/neovim/releases/latest/download/nvim.appimage" "$nvim_path"; then
      chmod u+x "$nvim_path"
      sudo mv "$nvim_path" /usr/local/bin/nvim
      log_info "Neovim installed successfully"
    else
      log_error "Failed to install Neovim"
      return 1
    fi
  else
    log_info "Neovim already installed"
  fi
}

# 2. Install asdf if not already present
install_asdf() {
  if [ ! -d "$ASDF_DIR" ]; then
    log_info "Installing asdf..."

    # Clone the full asdf repository for shell integration and plugins
    if git clone https://github.com/asdf-vm/asdf.git "$ASDF_DIR" --branch "$ASDF_VERSION"; then
      log_info "asdf repository cloned successfully"

      # Optional: Replace the shell script with the binary for better performance
      local asdf_archive="/tmp/asdf-${ASDF_VERSION}-linux-amd64.tar.gz"
      local asdf_url="https://github.com/asdf-vm/asdf/releases/download/${ASDF_VERSION}/asdf-${ASDF_VERSION}-linux-amd64.tar.gz"

      if download_with_retry "$asdf_url" "$asdf_archive"; then
        if gzip -t "$asdf_archive" 2>/dev/null; then
          # Extract binary to temporary location
          local temp_dir="/tmp/asdf-binary"
          mkdir -p "$temp_dir"

          if tar -C "$temp_dir" -xzf "$asdf_archive"; then
            # Replace the asdf executable with the binary version
            cp "$temp_dir/asdf" "$ASDF_DIR/bin/asdf"
            chmod +x "$ASDF_DIR/bin/asdf"
            log_info "Replaced asdf executable with binary version for better performance"
          fi

          # Clean up
          rm -rf "$temp_dir" "$asdf_archive"
        fi
      else
        log_warn "Failed to download binary, using shell script version"
      fi
    else
      log_error "Failed to clone asdf repository"
      return 1
    fi

    # Configure shell integration
    configure_asdf_shell_integration
  else
    log_info "asdf already installed"
  fi
}

# Configure asdf shell integration
configure_asdf_shell_integration() {
  local asdf_source_line=". \"$ASDF_DIR/asdf.sh\""
  local asdf_completion_line=". \"$ASDF_DIR/completions/asdf.bash\""

  # Add to zshrc
  add_to_file_if_missing "$HOME_DIR/.zshrc" "$asdf_source_line" ".asdf/asdf.sh"
  add_to_file_if_missing "$HOME_DIR/.zshrc" "$asdf_completion_line" ".asdf/completions/asdf.bash"

  # Add to bashrc
  add_to_file_if_missing "$HOME_DIR/.bashrc" "$asdf_source_line" ".asdf/asdf.sh"
  add_to_file_if_missing "$HOME_DIR/.bashrc" "$asdf_completion_line" ".asdf/completions/asdf.bash"
}

# 3. Setup asdf plugins and tools
setup_asdf_tools() {
  # Source asdf for this session
  if [ -f "$ASDF_DIR/asdf.sh" ]; then
    # shellcheck source=/dev/null
    . "$ASDF_DIR/asdf.sh"
  else
    log_error "asdf not found, cannot continue with language setup"
    return 1
  fi

  # Add language plugins
  local plugins=(nodejs python golang rust)
  for plugin in "${plugins[@]}"; do
    if asdf plugin add "$plugin" 2>/dev/null; then
      log_info "Added asdf plugin: $plugin"
    else
      log_info "Plugin $plugin already exists or failed to add"
    fi
  done

  # Install versions from .tool-versions if present
  if [ -f "$HOME_DIR/.tool-versions" ]; then
    log_info "Installing tools from .tool-versions..."
    if asdf install; then
      log_info "Tools installed successfully"
    else
      log_warn "Some tools failed to install"
    fi
  fi
}

# 4. Install Rust cargo tools
install_cargo_tools() {
  # Ensure cargo is in PATH
  export PATH="$HOME_DIR/.asdf/shims:$PATH"
  export PATH="$HOME_DIR/.cargo/bin:$PATH"

  if command_exists cargo; then
    log_info "Installing Rust cargo tools..."
    for tool in "${CARGO_TOOLS[@]}"; do
      if ! command_exists "$tool"; then
        log_info "Installing Rust tool: $tool"
        if cargo install "$tool"; then
          log_info "Successfully installed $tool"
        else
          log_warn "Failed to install $tool"
        fi
      else
        log_info "$tool already installed"
      fi
    done
  else
    log_warn "Cargo not found, skipping cargo tools installation"
  fi
}

# 5. Install SDKMAN
install_sdkman() {
  if [ ! -d "$HOME_DIR/.sdkman" ]; then
    log_info "Installing SDKMAN..."
    if curl -s "https://get.sdkman.io" | bash; then
      log_info "SDKMAN installed successfully"
    else
      log_error "Failed to install SDKMAN"
      return 1
    fi
  else
    log_info "SDKMAN already installed"
  fi
}

# 6. Setup Java ecosystem with SDKMAN
setup_java_ecosystem() {
  # Source SDKMAN init script if present
  if [ -s "$HOME_DIR/.sdkman/bin/sdkman-init.sh" ]; then
    # shellcheck source=/dev/null
    source "$HOME_DIR/.sdkman/bin/sdkman-init.sh"

    if command_exists sdk; then
      log_info "Installing Java ecosystem tools..."

      # Install with better error handling
      sdk install java 21.0.1-tem || log_warn "Failed to install Java"
      sdk install maven || log_warn "Failed to install Maven"
      sdk install gradle || log_warn "Failed to install Gradle"
      sdk install springboot || log_warn "Failed to install Spring Boot CLI"
    else
      log_warn "SDK command not available"
    fi
  else
    log_warn "SDKMAN init script not found"
  fi
}

# 7. Setup LazyVim plugins
setup_lazyvim() {
  if command_exists nvim; then
    log_info "Setting up LazyVim plugins..."
    if nvim --headless "+Lazy! sync" +qa; then
      log_info "LazyVim plugins setup complete"
    else
      log_warn "LazyVim plugin setup encountered issues"
    fi
  else
    log_warn "Neovim not found, skipping LazyVim setup"
  fi
}

# Main execution
main() {
  log_info "Starting development environment setup..."

  # Check if running in WSL2
  if ! grep -q "microsoft" /proc/version 2>/dev/null; then
    log_warn "This script is designed for WSL2, proceeding anyway..."
  fi

  # Execute installation steps
  install_neovim || log_error "Neovim installation failed"
  install_asdf || log_error "asdf installation failed"
  setup_asdf_tools || log_error "asdf tools setup failed"
  install_cargo_tools || log_error "Cargo tools installation failed"
  install_sdkman || log_error "SDKMAN installation failed"
  setup_java_ecosystem || log_error "Java ecosystem setup failed"
  setup_lazyvim || log_error "LazyVim setup failed"

  log_info "âœ… Development environment setup complete!"
  log_info "Please restart your shell or run: source ~/.zshrc (or ~/.bashrc)"
}

# Run main function
main "$@"
