#!/bin/bash
# Generated by chezmoi on {{ now | date "2006-01-02 15:04:05" }}

set -euo pipefail

#INFO: source logging functions
. 02_logging.sh

#INFO: checking to see if command exists in path
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

#INFO: Function to download and verify files
download_with_retry() {
  local url="$1"
  local output="$2"
  local retries=3
  local count=0

  while [ $count -lt $retries ]; do
    log_info "URL: '$url'"
    log_info "OUTPUT: '$output'"
    if curl -fsSL --connect-timeout 10 --max-time 300 "$url" -o "$output"; then
      # Verify the file is not empty and is the expected type
      if [ -s "$output" ]; then
        return 0
      fi
    fi
    count=$((count + 1))
    log_warn "Download attempt $count failed, retrying..."
    sleep 2
  done

  log_error "Failed to download $url after $retries attempts"
  return 1
}

#INFO: Function to add line to file if not present
add_to_file_if_missing() {
  local file="$1"
  local line="$2"
  local search_pattern="$3"

  # Create the file if it doesn't exist
  if [ ! -f "$file" ]; then
    touch "$file"
    log_info "Created $file"
  fi

  # Check if the pattern exists in the file
  if ! grep -q "$search_pattern" "$file"; then
    echo "$line" >>"$file"
    log_info "Added configuration to $file"
  else
    log_info "Configuration already exists in $file"
  fi
}

#INFO: Function to safely source files that might have unset variables
safe_source() {
  local file="$1"
  if [ -f "$file" ]; then
    # Create a temporary script that handles unbound variables
    local temp_script=$(mktemp)
    cat >"$temp_script" <<'EOF'
#!/bin/bash
# Temporarily disable strict mode for sourcing
set +euo pipefail
source "$1"
# Re-enable what we can
set -eo pipefail
EOF
    chmod +x "$temp_script"

    # Source the file with relaxed error handling
    if bash "$temp_script" "$file"; then
      rm -f "$temp_script"
      return 0
    else
      rm -f "$temp_script"
      return 1
    fi
  else
    return 1
  fi
}

#INFO: Function to safely source with export
safe_source_with_export() {
  local file="$1"
  if [ -f "$file" ]; then
    # Temporarily disable strict mode
    set +euo pipefail
    # shellcheck source=/dev/null
    source "$file"
    # Re-enable what we can safely
    set -eo pipefail
    return 0
  else
    return 1
  fi
}

#INFO: Function to back up existing files
backup_file() {
  local file="$1"
  if [ -f "$file" ]; then
    cp "$file" "$file.backup.$(date +%Y%m%d_%H%M%S)"
    log_info "Backed up existing $file"
  fi
}
