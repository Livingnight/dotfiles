#!/bin/bash
# Generated by chezmoi on {{ now | date "2006-01-02 15:04:05" }}

set -euo pipefail

#INFO: sourcing utility and logging functions
# . "{{ .chezmoi.homeDir }}/scripts/logging.sh"
# . "{{ .chezmoi.homeDir }}/scripts/utils.sh"

# 7. Install asdf if not already present
install_asdf() {
  log_step "Installing asdf..."

  if [ ! -d "$ASDF_DIR" ] || [ ! -f "$ASDF_DIR/asdf.sh" ]; then
    log_info "Installing asdf..."

    # if ! command_exists git; then
    #
    # fi

    # Clone the full asdf repository for shell integration and plugins
    if git clone https://github.com/asdf-vm/asdf.git "$ASDF_DIR" --branch "$ASDF_VERSION"; then
      log_info "asdf repository cloned successfully"

      log_step "Installing asdf binary and replacing the shell script with the binary."
      # Optional: Replace the shell script with the binary for better performance
      local asdf_archive="/tmp/asdf-${ASDF_VERSION}-linux-amd64.tar.gz"
      local asdf_url="https://github.com/asdf-vm/asdf/releases/download/${ASDF_VERSION}/asdf-${ASDF_VERSION}-linux-amd64.tar.gz"

      if download_with_retry "$asdf_url" "$asdf_archive"; then
        log_info "Downloading and installing the binary"
        if gzip -t "$asdf_archive" 2>/dev/null; then
          # Extract binary to temporary location
          local temp_dir="/tmp/asdf-binary"
          mkdir -p "$temp_dir"

          if tar -C "$temp_dir" -xzf "$asdf_archive"; then
            # Replace the asdf executable with the binary version
            cp "$temp_dir/asdf" "$ASDF_DIR/bin/asdf"
            chmod +x "$ASDF_DIR/bin/asdf"
            log_info "Replaced asdf executable with binary version for better performance"
          fi

          # Clean up
          rm -rf "$temp_dir" "$asdf_archive"
        else
          log_warn "Binary was downloaded but file was corrupted"
        fi
      else
        log_warn "Failed to download binary, using shell script version"
      fi
    else
      log_error "Failed to clone asdf repository"
      return 1
    fi

    # Configure shell integration
    configure_asdf_shell_integration_v2
  else
    log_info "asdf already installed"
  fi
}

# Configure asdf shell integration with debug logging
configure_asdf_shell_integration_v2() {
  log_info "Configuring asdf shell integration..."

  # For .zshrc
  if [ -f "$HOME_DIR/.zshrc" ]; then
    log_info "Found .zshrc at $HOME_DIR/.zshrc"

    # Check if asdf is already configured
    if ! grep -q "asdf.sh" "$HOME_DIR/.zshrc"; then
      log_info "asdf not found in .zshrc, adding configuration..."

      cat >>"$HOME_DIR/.zshrc" <<EOF

# asdf version manager
. "\$HOME/.asdf/asdf.sh"
# asdf completions
. "\$HOME/.asdf/completions/asdf.bash"
EOF

      log_info "Added asdf configuration to .zshrc"

      # Verify it was added
      if grep -q "asdf.sh" "$HOME_DIR/.zshrc"; then
        log_info "✓ Verification: asdf configuration found in .zshrc"
      else
        log_error "✗ Verification failed: asdf configuration not found in .zshrc"
      fi
    else
      log_info "asdf already configured in .zshrc"
    fi
  else
    log_warn ".zshrc not found at $HOME_DIR/.zshrc"
  fi

  # For .bashrc
  if [ -f "$HOME_DIR/.bashrc" ]; then
    log_info "Found .bashrc at $HOME_DIR/.bashrc"

    # Check if asdf is already configured
    if ! grep -q "asdf.sh" "$HOME_DIR/.bashrc"; then
      log_info "asdf not found in .bashrc, adding configuration..."

      cat >>"$HOME_DIR/.bashrc" <<EOF

# asdf version manager
. "\$HOME/.asdf/asdf.sh"
# asdf completions
. "\$HOME/.asdf/completions/asdf.bash"
EOF

      log_info "Added asdf configuration to .bashrc"

      # Verify it was added
      if grep -q "asdf.sh" "$HOME_DIR/.bashrc"; then
        log_info "✓ Verification: asdf configuration found in .bashrc"
      else
        log_error "✗ Verification failed: asdf configuration not found in .bashrc"
      fi
    else
      log_info "asdf already configured in .bashrc"
    fi
  else
    log_warn ".bashrc not found at $HOME_DIR/.bashrc"
  fi
}

# 8. Setup asdf plugins and tools
setup_asdf_tools() {
  log_step "Setting up asdf tools..."

  # Source asdf for this session with better error handling
  if [ -f "$ASDF_DIR/asdf.sh" ]; then
    log_info "Sourcing asdf for current session..."

    # Use safe sourcing method
    if safe_source_with_export "$ASDF_DIR/asdf.sh"; then
      log_info "Successfully sourced asdf"

      # Verify asdf command is available
      if ! command_exists asdf; then
        # Try adding to PATH manually
        export PATH="$ASDF_DIR/bin:$PATH"
        if command_exists asdf; then
          log_info "asdf command now available"
        else
          log_error "asdf command still not available after sourcing"
          return 1
        fi
      fi
    else
      log_error "Failed to source asdf"
      return 1
    fi
  else
    log_error "asdf.sh not found at $ASDF_DIR/asdf.sh"
    return 1
  fi

  # Add language plugins
  local plugins=(nodejs python golang rust)
  for plugin in "${plugins[@]}"; do
    if ! asdf plugin list | grep -q "^${plugin}$"; then
      log_info "Adding asdf plugin: $plugin"
      if asdf plugin add "$plugin" 2>/dev/null; then
        log_info "Added asdf plugin: $plugin"
      else
        log_warn "Failed to add plugin: $plugin"
      fi
    else
      log_info "Plugin $plugin already exists"
    fi
  done

  # Install versions from .tool-versions if present
  if [ -f "$HOME_DIR/.tool-versions" ]; then
    log_info "Installing tools from .tool-versions..."
    if asdf install; then
      log_info "Tools installed successfully"
    else
      log_warn "Some tools failed to install"
    fi
  else
    log_info "No .tool-versions file found, skipping tool installation"
  fi
}

# 9. Install Rust cargo tools
install_cargo_tools() {
  log_step "Installing Rust cargo tools..."

  # Ensure cargo is in PATH
  export PATH="$HOME_DIR/.asdf/shims:$PATH"
  export PATH="$HOME_DIR/.cargo/bin:$PATH"

  if command_exists cargo; then
    log_info "Installing Rust cargo tools..."
    for tool in "${CARGO_TOOLS[@]}"; do
      if ! command_exists "$tool"; then
        log_info "Installing Rust tool: $tool"
        if cargo install "$tool"; then
          log_info "Successfully installed $tool"
        else
          log_warn "Failed to install $tool"
        fi
      else
        log_info "$tool already installed (skipping)"
      fi
    done
  else
    log_warn "Cargo not found, skipping cargo tools installation"
  fi
}
